# MCP Browser Automation

A powerful browser automation system built with the Model Context Protocol (MCP) and Playwright, featuring an intuitive interactive client for web scraping, testing, and automation tasks.

## Features

### üöÄ Core Browser Automation
- **Full Browser Control**: Start/stop browser sessions with customizable settings
- **Navigation**: Navigate to URLs with intelligent page loading detection
- **Element Interaction**: Click, fill forms, and interact with web elements
- **Text Extraction**: Extract text from specific elements or entire pages
- **Screenshots**: Capture full-page screenshots for debugging
- **JavaScript Execution**: Run custom JavaScript in browser context

### üéØ Smart Element Detection
- **Intelligent Selectors**: Advanced CSS selector generation with fallback strategies
- **Clickable Element Discovery**: Automatically find and list interactive elements
- **Visibility Detection**: Smart visibility checking that accounts for viewport and overlapping elements
- **Text Element Browsing**: Specialized text content discovery for extraction tasks

### üîß Interactive Client Features
- **Menu-Driven Interface**: User-friendly tool selection and parameter input
- **Smart Parameter Assistance**: Auto-fetch clickable/text elements for relevant tools
- **Visual Debugging**: Screenshot capture and page info display
- **Real-time Element Browsing**: Interactive element selection with previews
- **Error Handling**: Comprehensive error handling with helpful debugging options
- **No External Dependencies**: Works entirely offline without API requirements

### üß™ Experimental AI Features
- **Natural Language Control**: Use Gemini AI to control browser with conversational commands (experimental)
- **Intelligent Task Planning**: AI automatically plans and executes multi-step automation tasks (in development)
- **Context-Aware Operations**: AI understands current page state and suggests appropriate actions (experimental)

## Quick Start

### Prerequisites
- Python 3.8+
- Node.js (for Playwright browser installation)

### Installation & Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/n-aravind-sai/browser_mcp.git
   cd browser_mcp
   ```

2. **Install Python dependencies**
   ```bash
   pip install -r requirements.txt
   ```

3. **Install Playwright browsers**
   ```bash
   playwright install chromium
   ```

4. **Start the application**
   ```bash
   python minimal_client.py
   ```

That's it! The client will automatically start the MCP server in the background and connect to it.

### Required Dependencies
```
asyncio
logging
dotenv
mcp
playwright
fastmcp
google-generativeai  # Only for experimental AI features
```

## Usage

### Primary Interface: Interactive Client

**Start the application:**
```bash
python minimal_client.py
```

The client automatically handles:
- Starting the MCP server subprocess
- Establishing connection
- Managing browser sessions
- Providing an intuitive menu system

### Available Tools

| Tool | Description | Use Case |
|------|-------------|----------|
| `start_browser` | Initialize browser session | Begin automation |
| `stop_browser` | Close browser session | Clean shutdown |
| `navigate_to` | Navigate to URL | Visit web pages |
| `click_element` | Click on elements | Button clicks, links |(space for improvement )
| `fill_form` | Fill form fields | Data entry |
| `extract_text` | Extract text content | Data scraping |
| `take_screenshot` | Capture screenshots | Debugging, documentation |
| `evaluate_javascript` | Run JavaScript | Custom page manipulation |
| `wait_for_element` | Wait for elements | Handle dynamic content |
| `get_clickable_elements` | List interactive elements | Element discovery |
| `get_page_info` | Get page metadata | Page analysis |

### Interactive Client Commands

- **Number Selection**: Choose tools by entering their menu number
- **`b`**: Go back to previous menu
- **`h`**: Show help information
- **`q`**: Quit the application
- **`m`**: Switch to manual input mode (when selecting elements)

## Step-by-Step Usage Examples

### Example 1: Basic Web Navigation
1. Start the client: `python minimal_client.py`
2. Select `1` - Start Browser
3. Select `2` - Navigate to URL
4. Enter URL: `https://google.com`
5. Select `8` - Take Screenshot (to see the page)
6. Select `0` - Stop Browser when done

### Example 2: Web Scraping
1. Start browser and navigate to target website
2. Select `9` - Get Clickable Elements (to explore page structure)
3. Select `6` - Extract Text from specific elements
4. Select `8` - Take Screenshot for verification
5. Stop browser when complete

### Example 3: Form Automation
1. Start browser and navigate to form page
2. Select `5` - Fill Form for input fields
3. Select `4` - Click Element for buttons
4. Select `6` - Extract Text for confirmation messages
5. Stop browser

### Example 4: Dynamic Content Handling
1. Navigate to page with dynamic content
2. Select `10` - Wait for Element for content to load
3. Select `7` - Evaluate JavaScript for complex interactions
4. Extract results when ready

## Advanced Features

### Smart Selector Generation
The system uses sophisticated selector generation that prioritizes:
1. **ID attributes** (most reliable)
2. **Data attributes** (modern web apps)
3. **Meaningful class names** (avoiding utility classes)
4. **Name attributes**
5. **Text content matching**
6. **Hierarchical selectors** with parent context

### Visibility Detection
Advanced visibility checking that considers:
- Element dimensions and positioning
- CSS visibility properties
- Viewport boundaries
- Element occlusion by other elements
- Opacity and display properties

### Interactive Element Selection
When selecting elements for interaction:
- **Auto-discovery**: Automatically lists relevant elements
- **Smart filtering**: Filters out non-interactive elements
- **Visual preview**: Shows element text and properties
- **Fallback options**: Manual input when auto-detection fails

## Experimental AI Client

**‚ö†Ô∏è Note: This is experimental and still in development**

For testing AI-powered features, you can optionally use the experimental client:

### Setup for AI Features
1. **Environment Setup**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   # Add your Gemini API key: GEMINI_API_KEY=your_api_key_here
   ```

2. **Start AI Client (Experimental)**
   ```bash
   python mcp_client.py
   ```

### AI Assistant Commands (Experimental)
The AI assistant attempts to understand natural language requests:
- **Navigation**: "Go to [website]", "Visit [URL]", "Navigate to [page]"
- **Interaction**: "Click [element]", "Press [button]", "Select [option]"
- **Forms**: "Fill out the form", "Enter [data] in [field]", "Submit the form"
- **Content**: "What's on this page?", "Get text from [element]", "Extract [content]"
- **Debugging**: "Take a screenshot", "Show page info", "What elements can I click?"

## Configuration

### Browser Options
The browser can be configured with various options:
```python
browser_args = [
    '--no-sandbox',
    '--disable-dev-shm-usage',
    '--disable-blink-features=AutomationControlled',
    '--disable-web-security',
    '--disable-features=VizDisplayCompositor'
]
```

### Environment Variables (Optional - for AI features only)
```env
GEMINI_API_KEY=your_google_gemini_api_key_here
```

## Troubleshooting

### Common Issues

**Client Won't Start**
- Ensure all dependencies are installed: `pip install -r requirements.txt`
- Verify Playwright browsers are installed: `playwright install chromium`
- Check Python version (3.8+ required)

**Browser Won't Start**
- Ensure Playwright browsers are installed: `playwright install chromium`
- Check system permissions for browser execution
- Try running with `headless=False` for debugging

**Elements Not Found**
- Use the screenshot feature to see current page state
- Check page loading with `get_page_info`
- Try waiting for elements with `wait_for_element`
- Use manual selector input as fallback

**Click Not Working**
- Element may not be visible or clickable
- Use screenshot to verify element state
- Try scrolling to element first
- Check for overlapping elements

**Page Loading Issues**
- Increase timeout values
- Use `wait_for_element` for dynamic content
- Check network connectivity
- Verify target website accessibility

### Debug Mode
For debugging, start the browser with:
```python
await start_browser(headless=False)
```

This allows you to see the browser window and observe interactions.

## Architecture

### Components
- **Primary Client** (`minimal_client.py`): Interactive menu-driven interface
- **MCP Server** (`mcp_server.py`): Browser automation backend (auto-started)
- **Experimental AI Client** (`mcp_client.py`): Gemini-powered interface (in development)
- **Browser Session**: Manages Playwright browser lifecycle
- **Element Detection**: Smart element discovery and selector generation

### Design Patterns
- **Subprocess Management**: Client automatically manages server lifecycle
- **Async/Await**: Full asynchronous operation for performance
- **Error Handling**: Comprehensive error handling with user-friendly messages
- **Separation of Concerns**: Clear separation between server logic and client interfaces
- **Extensibility**: Easy to add new tools and features

## Complete Getting Started Guide

### 1. First Time Setup
```bash
# Clone the repository
git clone https://github.com/n-aravind-sai/browser_mcp.git
cd browser_mcp

# Install Python dependencies
pip install -r requirements.txt

# Install Playwright browsers
playwright install chromium
```

### 2. Start Using the Tool
```bash
# Start the interactive client
python minimal_client.py
```

### 3. First Automation Session
When the client starts, you'll see a menu. Try this sequence:

1. **Select `1`** - Start Browser
2. **Select `2`** - Navigate to URL
   - Enter: `https://example.com`
3. **Select `8`** - Take Screenshot
   - This saves a screenshot so you can see what's on the page
4. **Select `11`** - Get Page Info
   - This shows you the page title and URL
5. **Select `9`** - Get Clickable Elements
   - This lists all the clickable elements on the page
6. **Select `0`** - Stop Browser
   - Always clean up when done

### 4. Exploring More Features
- Use **screenshots** frequently to debug what's happening
- Use **get_clickable_elements** to discover what you can interact with
- Use **extract_text** to get content from specific elements
- Use **wait_for_element** when dealing with dynamic content

## Best Practices

1. **Always start with a screenshot** after navigating to see what's on the page
2. **Use get_clickable_elements** to discover interactive elements
3. **Take screenshots** before and after important actions for debugging
4. **Use wait_for_element** for pages with dynamic content
5. **Stop the browser** when done to free up resources

## Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## License

[Add your license information here]

## Support

For issues and questions:
- Check the troubleshooting section
- Review the step-by-step examples
- Try using screenshots to debug issues
- The primary client works without any external API dependencies
- Open an issue on GitHub

---

**Note**: This tool is designed for legitimate automation tasks. Always respect website terms of service and robots.txt files when using for web scraping. The primary interactive client requires no external APIs and works completely offline.