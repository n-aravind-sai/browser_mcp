# MCP Browser Automation

A powerful browser automation system built with the Model Context Protocol (MCP) and Playwright, featuring both an intelligent AI-powered client and a manual interactive client for web scraping, testing, and automation tasks.

## Features

### ðŸš€ Core Browser Automation
- **Full Browser Control**: Start/stop browser sessions with customizable settings
- **Navigation**: Navigate to URLs with intelligent page loading detection
- **Element Interaction**: Click, fill forms, and interact with web elements
- **Text Extraction**: Extract text from specific elements or entire pages
- **Screenshots**: Capture full-page screenshots for debugging
- **JavaScript Execution**: Run custom JavaScript in browser context

### ðŸŽ¯ Smart Element Detection
- **Intelligent Selectors**: Advanced CSS selector generation with fallback strategies
- **Clickable Element Discovery**: Automatically find and list interactive elements
- **Visibility Detection**: Smart visibility checking that accounts for viewport and overlapping elements
- **Text Element Browsing**: Specialized text content discovery for extraction tasks

### ðŸ¤– AI-Powered Client Features
- **Natural Language Control**: Use Gemini AI to control browser with conversational commands
- **Intelligent Task Planning**: AI automatically plans and executes multi-step automation tasks
- **Context-Aware Operations**: AI understands current page state and suggests appropriate actions
- **Error Recovery**: Smart error handling with alternative approaches suggested by AI
- **Conversation History**: Maintains context across multiple interactions

### ðŸ”§ Manual Interactive Client Features
- **Menu-Driven Interface**: User-friendly tool selection and parameter input
- **Smart Parameter Assistance**: Auto-fetch clickable/text elements for relevant tools
- **Visual Debugging**: Screenshot capture and page info display
- **Real-time Element Browsing**: Interactive element selection with previews
- **Error Handling**: Comprehensive error handling with helpful debugging options

## Installation

### Prerequisites
- Python 3.8+
- Node.js (for Playwright browser installation)
- Google Gemini API key (for AI features)

### Setup

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd mcp-browser-automation
   ```

2. **Install Python dependencies**
   ```bash
   pip install -r requirements.txt
   ```

3. **Install Playwright browsers**
   ```bash
   playwright install chromium
   ```

4. **Environment Setup**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   # Add your Gemini API key: GEMINI_API_KEY=your_api_key_here
   ```

### Required Dependencies
```
asyncio
logging
dotenv
mcp
playwright
fastmcp
google-generativeai  # For AI features
```

## Usage

### Starting the System

1. **Start the MCP Server**
   ```bash
   python mcp_server.py
   ```

2. **Choose Your Client Interface**

   **Option A: AI-Powered Client (Recommended)**
   ```bash
   python mcp_client.py
   ```
   
   **Option B: Manual Interactive Client**
   ```bash
   python minimal_client.py
   ```

### Client Interfaces

#### ðŸ¤– AI-Powered Client (`mcp_client.py`)
The enhanced client provides two modes:

**1. AI Assistant Mode**
- Use natural language to control the browser
- AI automatically selects and executes appropriate tools
- Context-aware suggestions and error recovery
- Examples:
  - "Go to google.com"
  - "Click the search button" 
  - "Fill out the login form"
  - "Take a screenshot"
  - "What's on this page?"

**2. Manual Tool Selection**
- Traditional menu-driven interface
- Direct access to all browser automation tools
- Smart parameter assistance and element discovery

#### ðŸ”§ Manual Client (`minimal_client.py`)
- Simple, focused interface for direct tool usage
- No AI dependencies required
- Ideal for scripted or programmatic usage

### Available Tools

| Tool | Description | Use Case |
|------|-------------|----------|
| `start_browser` | Initialize browser session | Begin automation |
| `stop_browser` | Close browser session | Clean shutdown |
| `navigate_to` | Navigate to URL | Visit web pages |
| `click_element` | Click on elements | Button clicks, links |
| `fill_form` | Fill form fields | Data entry |
| `extract_text` | Extract text content | Data scraping |
| `take_screenshot` | Capture screenshots | Debugging, documentation |
| `evaluate_javascript` | Run JavaScript | Custom page manipulation |
| `wait_for_element` | Wait for elements | Handle dynamic content |
| `get_clickable_elements` | List interactive elements | Element discovery |
| `get_page_info` | Get page metadata | Page analysis |

### AI Assistant Commands

The AI assistant understands natural language requests:

- **Navigation**: "Go to [website]", "Visit [URL]", "Navigate to [page]"
- **Interaction**: "Click [element]", "Press [button]", "Select [option]"
- **Forms**: "Fill out the form", "Enter [data] in [field]", "Submit the form"
- **Content**: "What's on this page?", "Get text from [element]", "Extract [content]"
- **Debugging**: "Take a screenshot", "Show page info", "What elements can I click?"

### Interactive Client Commands

- **Number Selection**: Choose tools by entering their menu number
- **`b`**: Go back to previous menu
- **`h`**: Show help information
- **`q`**: Quit the application
- **`m`**: Switch to manual input mode (when selecting elements)

## Examples

### AI-Powered Automation
```
You: "Go to google.com and search for 'python automation'"

AI: I'll help you navigate to Google and perform a search. Let me:
1. Navigate to google.com
2. Find the search input field
3. Enter your search term
4. Click the search button

[Executes tools automatically]
```

### Manual Web Scraping
```python
# 1. Start browser
# 2. Navigate to target website
# 3. Use get_clickable_elements to find elements
# 4. Extract text from specific elements
# 5. Take screenshot for verification
```

### Form Automation
```python
# 1. Start browser
# 2. Navigate to form page
# 3. Use fill_form for input fields
# 4. Use click_element for buttons
# 5. Extract confirmation text
```

### Dynamic Content Handling
```python
# 1. Navigate to page
# 2. Use wait_for_element for dynamic content
# 3. Use evaluate_javascript for complex interactions
# 4. Extract results when ready
```

## Advanced Features

### AI Intelligence
The Gemini-powered client provides:
- **Task Planning**: Automatically determines the sequence of tools needed
- **Context Awareness**: Uses current page state to make intelligent decisions
- **Error Recovery**: Suggests alternatives when operations fail
- **Conversation Memory**: Maintains context across multiple interactions

### Smart Selector Generation
The system uses sophisticated selector generation that prioritizes:
1. **ID attributes** (most reliable)
2. **Data attributes** (modern web apps)
3. **Meaningful class names** (avoiding utility classes)
4. **Name attributes**
5. **Text content matching**
6. **Hierarchical selectors** with parent context

### Visibility Detection
Advanced visibility checking that considers:
- Element dimensions and positioning
- CSS visibility properties
- Viewport boundaries
- Element occlusion by other elements
- Opacity and display properties

### Interactive Element Selection
When selecting elements for interaction:
- **Auto-discovery**: Automatically lists relevant elements
- **Smart filtering**: Filters out non-interactive elements
- **Visual preview**: Shows element text and properties
- **Fallback options**: Manual input when auto-detection fails

## Configuration

### Environment Variables
```env
GEMINI_API_KEY=your_google_gemini_api_key_here
```

### Browser Options
The browser can be configured with various options:
```python
browser_args = [
    '--no-sandbox',
    '--disable-dev-shm-usage',
    '--disable-blink-features=AutomationControlled',
    '--disable-web-security',
    '--disable-features=VizDisplayCompositor'
]
```

### Hidden Tools
Some tools are used internally and hidden from the user menu:
- `evaluate_javascript`: Used by other tools for element detection
- `wait_for_element`: Used internally for reliable interactions
- `get_form_elements`: Used internally by form filling interface

## Troubleshooting

### Common Issues

**AI Assistant Not Working**
- Ensure you have a valid GEMINI_API_KEY in your .env file
- Check your Google Cloud API quota and billing
- Verify internet connectivity for API calls
- Use manual mode as fallback

**Browser Won't Start**
- Ensure Playwright browsers are installed: `playwright install`
- Check system permissions for browser execution
- Try running with `headless=False` for debugging

**Elements Not Found**
- Use the screenshot feature to see current page state
- Check page loading with `get_page_info`
- Try waiting for elements with `wait_for_element`
- Use manual selector input as fallback

**Click Not Working**
- Element may not be visible or clickable
- Use screenshot to verify element state
- Try scrolling to element first
- Check for overlapping elements

**Page Loading Issues**
- Increase timeout values
- Use `wait_for_element` for dynamic content
- Check network connectivity
- Verify target website accessibility

### Debug Mode
For debugging, start the browser with:
```python
await start_browser(headless=False)
```

This allows you to see the browser window and observe interactions.

## Architecture

### Components
- **MCP Server** (`mcp_server.py`): Handles browser automation backend
- **AI Client** (`mcp_client.py`): Gemini-powered intelligent interface
- **Manual Client** (`minimal_client.py`): Traditional interactive interface
- **Browser Session**: Manages Playwright browser lifecycle
- **Element Detection**: Smart element discovery and selector generation
- **AI Agent**: Gemini integration for natural language processing

### Design Patterns
- **Async/Await**: Full asynchronous operation for performance
- **Error Handling**: Comprehensive error handling with user-friendly messages
- **Separation of Concerns**: Clear separation between server logic and client interfaces
- **AI Integration**: Modular AI assistance that enhances but doesn't replace manual control
- **Extensibility**: Easy to add new tools and features

## Getting Started Quick Guide

1. **First Time Setup**
   ```bash
   git clone <repo>
   cd mcp-browser-automation
   pip install -r requirements.txt
   playwright install chromium
   cp .env.example .env
   # Add GEMINI_API_KEY to .env
   ```

2. **Start Automation**
   ```bash
   # Terminal 1: Start the MCP server
   python mcp_server.py
   
   # Terminal 2: Start the AI client
   python mcp_client.py
   ```

3. **First Commands**
   - Choose "AI Assistant Mode"
   - Try: "Go to google.com"
   - Try: "Take a screenshot"
   - Try: "What's on this page?"

## Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## License

[Add your license information here]

## Support

For issues and questions:
- Check the troubleshooting section
- Review the examples
- Try the manual client if AI features aren't working
- Open an issue on GitHub

---

**Note**: This tool is designed for legitimate automation tasks. Always respect website terms of service and robots.txt files when using for web scraping. 
The AI assistant requires a Google Gemini API key, but the manual client works without any external API dependencies.
